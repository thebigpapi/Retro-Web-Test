security:

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            logout:
                path:   app_logout
                target: app_homepage
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            http_basic:
                realm: Secured Area
        main:
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
            form_login:
                # "login" is the name of the route created previously
                login_path: app_login
                check_path: app_login_check
                enable_csrf: true
            logout:
                path:   app_logout
                target: app_homepage
            lazy: true
            provider: app_user_provider
            http_basic:
                realm: Secured Area
            entry_point: App\Security\LoginFormAuthenticator
            custom_authenticator: App\Security\LoginFormAuthenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    password_hashers:
        # Use native password hasher, which auto-selects and migrates the best
        # possible hashing algorithm (starting from Symfony 5.3 this is "bcrypt")
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # require ROLE_ADMIN for /admin*
        #- { path: '^/login$', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/dashboard*', roles: ROLE_USER }
        - { path: '^/admin*', roles: ROLE_SUPER_ADMIN }


        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
        #- { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

        # the 'path' value can be any valid regular expression
        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
        #- { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }
